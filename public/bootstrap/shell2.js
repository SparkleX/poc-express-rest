this.sap = this.sap || {};

(function() {
	"use strict";
	sap.ushell = sap.ushell || {};

	function fnMakeTile(oApplication, iIdSuffix, sKey) {
		var sApplicationTitle = oApplication.title
				|| oApplication.additionalInformation.replace(
						"SAPUI5.Component=", "").split(".").pop();
		return {
			"id" : "sap_ushell_generated_tile_id_" + iIdSuffix,
			"title" : sApplicationTitle,
			"size" : "1x1",
			"tileType" : "sap.ushell.ui.tile.StaticTile",
			"properties" : {
				"chipId" : "sap_ushell_generated_chip_id",
				"title" : sApplicationTitle,
				"info" : oApplication.description,
				"targetURL" : "#" + sKey
			}
		};
	}
	function fnGetApplicationKeys(oCfg) {
		var aApplicationKeys = [], sApplicationKey;

		if (!oCfg || !oCfg.applications
				|| typeof oCfg.applications !== "object") {
			return aApplicationKeys;
		}

		// create an array containing all valid navigation targets
		for (sApplicationKey in oCfg.applications) {
			// skip the application key "" as it would disrupt the rendering of the fiori2 renderer
			if (oCfg.applications.hasOwnProperty(sApplicationKey)
					&& sApplicationKey !== "") {
				aApplicationKeys.push(sApplicationKey);
			}
		}

		return aApplicationKeys;
	}
	function adjustApplicationConfiguration(oConfig) {

		var aApplicationKeys = fnGetApplicationKeys(oConfig);

		if (aApplicationKeys.length) {

			// make sure we have the place for the tiles
			var oLaunchPageAdapterConfig = jQuery.sap.getObject(
					"services.LaunchPage.adapter.config", 0, oConfig);

			// make sure group exists
			if (!oLaunchPageAdapterConfig.groups) {
				oLaunchPageAdapterConfig.groups = [];
			}

			var oAutoGeneratedGroup = {
				"id" : "sap_ushell_generated_group_id",
				"title" : "Generated Group",
				"tiles" : []
			};
			oLaunchPageAdapterConfig.groups.unshift(oAutoGeneratedGroup);

			// generate the tile
			aApplicationKeys.forEach(function(sApplicationKey, iSuffix) {
				var tile = fnMakeTile(oConfig.applications[sApplicationKey],
						iSuffix, sApplicationKey)
				oAutoGeneratedGroup.tiles.push(tile

				);
			});

			// generate NavTargetResolution data from .applications
			var oNavTargetResolutionConfig = jQuery.sap.getObject(
					"services.NavTargetResolution.adapter.config.applications",
					0, oConfig);
			for ( var key in oConfig.applications) {
				oNavTargetResolutionConfig[key] = oConfig.applications[key];
			}

			delete oConfig.applications;
		}

		return oConfig;
	}

	function bootstrap(fnCallback) {
		jQuery.sap.require("sap.ushell.services.Container");
		var config = window["sap-ushell-config"];
		var apps = jQuery.getJSON({
			url : "/bootstrap/apps.json",
			dataType : "json",
			async : false
		});
		config.applications = apps.responseJSON;

		var oClientSideTargetResolutionConfig, oRendererConfig, oUi5ComponentLoaderConfig;

		window["sap-ushell-config"] = adjustApplicationConfiguration(window["sap-ushell-config"]);
		oRendererConfig = jQuery.sap.getObject(
				"renderers.fiori2.componentData.config", 0,
				window["sap-ushell-config"]);
		if (!oRendererConfig.rootIntent) {
			oRendererConfig.rootIntent = "Shell-home";
		}
		sap.ushell.bootstrap("local").done(fnCallback);
	}

	window["sap-ushell-config"] = {
		defaultRenderer : "fiori2",
		renderers : {
			fiori2 : {
				componentData : {
					config : {
						search : "hidden"
					}
				}
			}
		},
		applications : []
	};

	window['sap-ui-config'] = {
		"xx-bootTask" : bootstrap
	};

}());